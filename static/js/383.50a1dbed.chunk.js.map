{"version":3,"file":"static/js/383.50a1dbed.chunk.js","mappings":"uQAKMA,EAAe,mCAAG,sGACCC,EAAAA,EAAAA,IAAA,oDAHV,MAGU,mBAErBC,EAAAA,GAHoB,cAChBC,EADgB,OAMhBC,EAASD,EAASE,KAAKC,QAAQC,KACnC,YACE,MAAO,CACLC,GAFkC,EAAnCA,GAGCC,KAHkC,EAA/BA,KAIHC,MAJkC,EAAzBA,MAKTC,YALkC,EAAlBA,YAOnB,IAdmB,kBAiBf,CAAEP,OAAAA,IAjBa,2CAAH,qDAoBrB,I,0BCtBaQ,GAAkBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,wFAMfE,EAAQF,EAAAA,GAAAA,GAAH,oEAILG,EAAmBH,EAAAA,GAAAA,GAAH,wGAOhBI,EAAWJ,EAAAA,GAAAA,GAAH,iF,SC+CrB,EAzDa,WACX,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOd,EAAP,KAAee,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MAyBjB,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,wGAEtBJ,GAAa,GAFS,SAGGrB,IAHH,gBAGdI,EAHc,EAGdA,OACFsB,EAAkBtB,EAAOG,KAAI,SAAAoB,GACjC,IAAMjB,EAAQiB,EAAMjB,OAASiB,EAAMlB,KACnC,MAAO,CACLD,GAAImB,EAAMnB,GACVE,MAAAA,EACAC,YAAagB,EAAMhB,YAEtB,IACDQ,EAAUO,GACVL,GAAa,GAbS,kDAetBO,QAAQC,MAAR,MAfsB,0DAAH,qDAmBvBJ,GACD,GAAE,KAGD,4BACE,SAACV,EAAD,UAAO,oBACNK,GACC,uBAAG,gBAEH,SAACJ,EAAD,UACGZ,EAAOG,KAAI,SAAAoB,GAAK,OACf,SAACf,EAAD,CAEEkB,GAAE,kBAAaH,EAAMnB,IACrBuB,MAAO,CAAEC,KAAMV,GAHjB,UAKE,UAACL,EAAD,YACE,gBACEgB,IAAG,0CAAqCN,EAAMhB,aAC9CuB,IAAKP,EAAMjB,MACXyB,MAAM,SAER,uBAAIR,EAAMjB,YAVPiB,EAAMnB,GAFE,QAoB1B,C,oBCzDD,IARgB,CAEd4B,QAAS,CACPC,OAAQ,mBACRC,cACE,8N","sources":["services/MoviesList-api.js","pages/Home.styled.js","pages/Home.jsx","services/ApiOptions.js"],"sourcesContent":["import axios from 'axios';\nimport options from './ApiOptions';\n\nconst period = 'day';\n\nconst FetchMoviesList = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/${period}?language=en-US`,\n    options\n  );\n\n  const movies = response.data.results.map(\n    ({ id, name, title, poster_path }) => {\n      return {\n        id,\n        name,\n        title,\n        poster_path,\n      };\n    }\n  );\n  // console.log({ movies });\n  return { movies };\n};\n\nexport default FetchMoviesList;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledMovieLink = styled(Link)`\n  text-decoration: none;\n  font-weight: 400;\n  color: black;\n`;\n\nexport const Title = styled.h1`\n  font-weight: 600;\n  text-align: center;\n`;\nexport const StyledMoviesList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n  justify-content: center;\n`;\n\nexport const StyledLi = styled.li`\n  display: flex;\n  flex-flow: column;\n  width: 185px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport FetchMoviesList from 'services/MoviesList-api';\nimport {\n  StyledMovieLink,\n  Title,\n  StyledMoviesList,\n  StyledLi,\n} from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    const getTrendingMovies = async () => {\n      try {\n        setIsLoading(true);\n        const { movies } = await FetchMoviesList();\n        const formattedMovies = movies.map(movie => {\n          const title = movie.title || movie.name;\n          return {\n            id: movie.id,\n            title,\n            poster_path: movie.poster_path,\n          };\n        });\n        setMovies(formattedMovies);\n        setIsLoading(false);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    getTrendingMovies();\n  }, []);\n\n  return (\n    <div>\n      <Title>Trending movies</Title>\n      {isLoading ? (\n        <p>Loading...</p>\n      ) : (\n        <StyledMoviesList>\n          {movies.map(movie => (\n            <StyledMovieLink\n              key={movie.id}\n              to={`/movies/${movie.id}`}\n              state={{ from: location }}\n            >\n              <StyledLi>\n                <img\n                  src={`https://image.tmdb.org/t/p/w185/${movie.poster_path}`}\n                  alt={movie.title}\n                  width=\"185\"\n                />\n                <b>{movie.title}</b>\n              </StyledLi>\n            </StyledMovieLink>\n          ))}\n        </StyledMoviesList>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","const options = {\n  // method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5NGNjZGMwZDdmMmQ4NzRkZmUwYjgyMTgzZTE4ZTMyOSIsInN1YiI6IjY0NjVmZDdlYTUwNDZlMDBlNWI1MDBjOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.uQwgCh7Dwgcvue4ZCmBq70fD9FuC0cja1l53oOovpSo',\n  },\n};\nexport default options;\n"],"names":["FetchMoviesList","axios","options","response","movies","data","results","map","id","name","title","poster_path","StyledMovieLink","styled","Link","Title","StyledMoviesList","StyledLi","useState","setMovies","isLoading","setIsLoading","location","useLocation","useEffect","getTrendingMovies","formattedMovies","movie","console","error","to","state","from","src","alt","width","headers","accept","Authorization"],"sourceRoot":""}